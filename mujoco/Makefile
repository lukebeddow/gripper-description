# a makefile to generate mujoco source files

# this makefile builds mujoco model files, an xml format called mjcf.
# There are three key targets of makefile:
# 	1. mjcf files for the robots (gripper, panda)
#		2. mjcf files for objects, the 'mjcf_include' files
#		3. a set of task files (created by xml_script.py) which combine robots and
#			 objects into final mjcf files which can be loaded for grasping tasks.
#
# xml_script.py current takes all the objects generated by the mjcf_include files
# and randomly splits them up, making a series of task files each with a random
# set of objects. So when you load a task file, you get a random assortment of
# objects you can try to grasp. This part of the makefile is always run.

# ----- user defined options ----- #

# define directory structure
MJCFDIR = mjcf
URDFDIR = urdf
TASKDIR = $(MJCFDIR)/task
TASKMASTER = gripper_task.xml
MJINCDIR = $(MJCFDIR)/mjcf_include
ASSETDIR = $(MJINCDIR)/assets
OBJDIR = $(MJINCDIR)/objects

# directories and files containing urdf dependencies
XACRODIR = ../xacro
CONFIGDEP = ../config/gripper.yaml

# define additional dependencies for the mjcf_include xmls
MJINCTARGET := objects.xml assets.xml details.xml
MJDEP := define_objects.yaml build_object_set.py

MAKEFLAGS += -j8 # run on up to 8 parallel cpu cores

# ----- automatically generated variables ----- #

# use the robot xacros to get the desired mjcf target names for robots
XACROS := $(wildcard xacro/*.urdf.xacro)
URDFS := $(patsubst xacro/%.urdf.xacro, $(URDFDIR)/%.urdf, $(XACROS))
MJCFS := $(patsubst xacro/%.urdf.xacro, $(MJCFDIR)/%.xml, $(XACROS))

# add the additional dependencies for the mjcf_include files
MJDEP := $(patsubst %, $(MJINCDIR)/%, $(MJDEP))
MJINCTARGET := $(patsubst %, $(MJINCDIR)/%, $(MJINCTARGET))

# create the target directories if they don't exist
DIRS := $(TASKDIR) $(ASSETDIR) $(OBJDIR)
$(info $(shell mkdir -p $(DIRS)))

# find files that we depend on for updating urdf changes
DEPS := $(wildcard $(XACRODIR)/*.xacro) $(CONFIGDEP)

# ----- start of make ----- #

# first run preprocess to source ros, that automatically runs 'make targets'
all: $(MJCFS) generate_xml
	echo Making the task xml files - note this command is always run
	rm -f $(TASKDIR)/*.xml
	rm -f $(MJINCDIR)/objects/*.xml
	rm -f $(MJINCDIR)/assets/*.xml
	python ./xml_script.py

# only re-run the xml script to post process xml files
.PHONY: script
script: $(MJCFS)
	echo Making the task xml files - note this command is always run
	rm -f $(TASKDIR)/*.xml
	rm -f $(MJINCDIR)/objects/*.xml
	rm -f $(MJINCDIR)/assets/*.xml
	python ./xml_script.py

# build the mujoco mjcf files
.PHONY: $(MJCFS) # phony to always run, so xml_script is never run twice on same file
$(MJCFS): $(MJCFDIR)/%.xml : $(URDFDIR)/%.urdf
	rm -f $@
	cp $< $(MJCFDIR)/$(notdir $<) &&\
	cd $(MJCFDIR) &&\
	./compile $(notdir $<) $(notdir $@) &&\
  rm $(notdir $<)

# build the urdfs which depend on the xacro files
$(URDFS): $(URDFDIR)/%.urdf : xacro/%.urdf.xacro $(DEPS)
	./xacro3 $< > $@

# # create the object xml includes
# $(MJINCTARGET): generate_xml
# 	python3 ./$(MJINCDIR)/build_object_set.py

.PHONY: generate_xml
generate_xml: $(MJDEP)
	python3 ./$(MJINCDIR)/build_object_set.py

.PHONY: test
test:
	python3 ./$(MJINCDIR)/build_object_set.py

clean:
	rm -f $(URDFS)
	rm -f $(MJCFS)
	rm -f $(MJINCTARGET)


# below is no longer needed, but the code may be helpful to keep

# .PHONY: preprocesses
# preprocesses: source_ros

# # this phony target is called when doing 'make' or 'make all'
# .PHONY: targets
# targets: $(MJCFS) $(MJINC)
#   sleep 1
#   -pkill roscore
# 	rm -f $(TASKDIR)/*.xml
# 	rm -f $(MJINCDIR)/objects/*.xml
# 	rm -f $(MJINCDIR)/assets/*.xml
# 	./xml_script.py

# # run a .sh to source ros and start roscore, it then calls 'make targets'
# .PHONY: source_ros
# ifndef LUKE_FLAG
# source_ros:
# 	echo sourcing ros now
# 	./source_ros.sh $(MAKE) targets
# else
# source_ros:
# 	echo ROS already sourced
# endif

# ----- source_ros.sh ----- #

# #!/bin/bash

# # this script is no longer used, but the code may be helpful to keep

# # roscore in the background
# source ~/gripper_repo_ws/devel/setup.bash
# roscore &

# # set the flag to know ros is sourced
# export LUKE_FLAG=1

# # if first arg is set, recall make
# if [ -n "$1" ]; then
#   echo ros has now been sourced
#   $1 $2
# fi